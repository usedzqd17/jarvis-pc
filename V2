#peut gerer le son de firefox maintenant 


import speech_recognition as sr
import pyttsx3
from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume, ISimpleAudioVolume
from ctypes import cast, POINTER
from comtypes import CLSCTX_ALL
import re
import subprocess

# Initialisation du moteur de synth√®se vocale
engine = pyttsx3.init()
engine.setProperty('rate', 150)

def speak(text):
    print(f"Jarvis: {text}")
    engine.say(text)
    engine.runAndWait()

def listen():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        print("üé§ En √©coute... Dites une commande.")
        recognizer.adjust_for_ambient_noise(source)
        audio = recognizer.listen(source)

    try:
        text = recognizer.recognize_google(audio, language='fr-FR')
        print(f"Vous avez dit : {text}")
        return text.lower()
    except sr.UnknownValueError:
        speak("D√©sol√©, je n'ai pas compris.")
        return ""
    except sr.RequestError:
        speak("Erreur de connexion avec le service de reconnaissance vocale.")
        return ""

def get_volume_control():
    devices = AudioUtilities.GetSpeakers()
    interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
    return cast(interface, POINTER(IAudioEndpointVolume))

def augmenter_volume(pas=0.1):
    volume = get_volume_control()
    current = volume.GetMasterVolumeLevelScalar()
    nouveau = min(current + pas, 1.0)
    volume.SetMasterVolumeLevelScalar(nouveau, None)
    print(f"üîä Volume augment√© √† {int(nouveau * 100)}%")

def baisser_volume(pas=0.1):
    volume = get_volume_control()
    current = volume.GetMasterVolumeLevelScalar()
    nouveau = max(current - pas, 0.0)
    volume.SetMasterVolumeLevelScalar(nouveau, None)
    print(f"üîâ Volume baiss√© √† {int(nouveau * 100)}%")

def definir_volume(pourcentage):
    volume = get_volume_control()
    valeur = max(0.0, min(pourcentage / 100.0, 1.0))
    volume.SetMasterVolumeLevelScalar(valeur, None)
    print(f"üéöÔ∏è Volume d√©fini √† {int(valeur * 100)}%")

def extraire_pourcentage(cmd):
    match = re.search(r"(\d+)\s*%?", cmd)
    if match:
        return int(match.group(1))
    return None

# üîä Contr√¥le du volume de Firefox uniquement
def get_firefox_volume_session():
    sessions = AudioUtilities.GetAllSessions()
    for session in sessions:
        if session.Process and session.Process.name().lower() == "firefox.exe":
            return session._ctl.QueryInterface(ISimpleAudioVolume)
    return None

def augmenter_volume_firefox(pas=0.1):
    volume = get_firefox_volume_session()
    if volume:
        current = volume.GetMasterVolume()
        nouveau = min(current + pas, 1.0)
        volume.SetMasterVolume(nouveau, None)
        print(f"üîä Volume de Firefox augment√© √† {int(nouveau * 100)}%")
    else:
        print("‚ùå Session Firefox non trouv√©e.")
        speak("Firefox n'est pas actif ou ne joue pas de son.")

def baisser_volume_firefox(pas=0.1):
    volume = get_firefox_volume_session()
    if volume:
        current = volume.GetMasterVolume()
        nouveau = max(current - pas, 0.0)
        volume.SetMasterVolume(nouveau, None)
        print(f"üîâ Volume de Firefox baiss√© √† {int(nouveau * 100)}%")
    else:
        print("‚ùå Session Firefox non trouv√©e.")
        speak("Firefox n'est pas actif ou ne joue pas de son.")

def definir_volume_firefox(pourcentage):
    volume = get_firefox_volume_session()
    if volume:
        valeur = max(0.0, min(pourcentage / 100.0, 1.0))
        volume.SetMasterVolume(valeur, None)
        print(f"üéöÔ∏è Volume de Firefox d√©fini √† {int(valeur * 100)}%")
        speak(f"Volume de Firefox r√©gl√© √† {int(valeur * 100)}%.")
    else:
        print("‚ùå Session Firefox non trouv√©e.")
        speak("Firefox n'est pas actif ou ne joue pas de son.")

def main():
    speak("Bonjour, je suis Jarvis. Dites 'Garmin' suivi d'une commande.")
    while True:
        command = listen()
        if command:
            if command.startswith("garmin"):
                instruction = command.replace("garmin", "").strip()

                if "monte le son" in instruction or "augmente le volume" in instruction:
                    augmenter_volume()
                    speak("J'ai augment√© le volume.")

                elif "baisse le son" in instruction or "diminue le volume" in instruction:
                    baisser_volume()
                    speak("J'ai baiss√© le volume.")

                elif "volume √†" in instruction or "mets le volume √†" in instruction:
                    pourcentage = extraire_pourcentage(instruction)
                    if pourcentage is not None:
                        definir_volume(pourcentage)
                        speak(f"Volume d√©fini √† {pourcentage}%.")
                    else:
                        speak("Je n'ai pas compris le pourcentage.")
                
                # üîä Commandes sp√©cifiques √† Firefox
                elif "baisse le son de firefox" in instruction:
                    baisser_volume_firefox()
                    speak("J'ai baiss√© le volume de Firefox.")

                elif "augmente le son de firefox" in instruction:
                    augmenter_volume_firefox()
                    speak("J'ai augment√© le volume de Firefox.")

                elif "mets le volume de firefox √†" in instruction or "volume de firefox √†" in instruction:
                    pourcentage = extraire_pourcentage(instruction)
                    if pourcentage is not None:
                        definir_volume_firefox(pourcentage)
                    else:
                        speak("Je n'ai pas compris le pourcentage pour Firefox.")

                elif "activer duel" in instruction:
                    try:
                        subprocess.Popen(["firefox.exe"])
                        speak("Jett activ√©e.")
                    except Exception as e:
                        speak(f"Erreur lors du lancement : {e}")

                elif any(word in instruction for word in ["stop", "au revoir", "arr√™te", "quitte"]):
                    speak("√Ä bient√¥t !")
                    break

                else:
                    speak("Commande non reconnue apr√®s 'Garmin'.")
            else:
                speak("Dites 'Garmin' avant la commande.")

if __name__ == "__main__":
    main()
